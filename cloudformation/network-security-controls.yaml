AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Networking Lab - Network Security Controls (SGs vs NACLs) + VPC Flow Logs to CloudWatch Logs.

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 KeyPair name for SSH
  YourIpCidr:
    Type: String
    Description: Your IP in CIDR form for SSH to instances (e.g., 203.0.113.10/32)
    Default: 0.0.0.0/0
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues: [t2.micro, t3.micro, t3a.micro]

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.50.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: lab3-vpc }]

  Igw:
    Type: AWS::EC2::InternetGateway

  AttachIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref Igw

  RtPublic:
    Type: AWS::EC2::RouteTable
    Properties: { VpcId: !Ref Vpc }

  RtDefault:
    Type: AWS::EC2::Route
    DependsOn: AttachIgw
    Properties:
      RouteTableId: !Ref RtPublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw

  SubnetGood:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.50.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags: [{ Key: Name, Value: lab3-public-good }]

  AssocRtGood:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { SubnetId: !Ref SubnetGood, RouteTableId: !Ref RtPublic }

  SubnetBlocked:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.50.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags: [{ Key: Name, Value: lab3-public-blocked }]

  AssocRtBlocked:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { SubnetId: !Ref SubnetBlocked, RouteTableId: !Ref RtPublic }

  # ----------------- Security Group -----------------
  WebSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web SG - HTTP from world, SSH from your IP, ICMP within VPC
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - { IpProtocol: tcp, FromPort: 80, ToPort: 80, CidrIp: 0.0.0.0/0 }
        - { IpProtocol: tcp, FromPort: 22, ToPort: 22, CidrIp: !Ref YourIpCidr }
        - { IpProtocol: icmp, FromPort: -1, ToPort: -1, CidrIp: 10.50.0.0/16 }
      SecurityGroupEgress:
        - { IpProtocol: -1, CidrIp: 0.0.0.0/0 }

  # ----------------- NACLs -----------------
  GoodNacl:
    Type: AWS::EC2::NetworkAcl
    Properties: { VpcId: !Ref Vpc, Tags: [{ Key: Name, Value: lab3-nacl-good }] }

  GoodNaclIn22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref GoodNacl
      RuleNumber: 90
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: !Ref YourIpCidr
      PortRange: { From: 22, To: 22 }

  GoodNaclIn80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref GoodNacl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 80, To: 80 }

  GoodNaclInEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref GoodNacl
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 1024, To: 65535 }

  GoodNaclInIcmpVpc:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref GoodNacl
      RuleNumber: 120
      Protocol: 1
      RuleAction: allow
      Egress: false
      CidrBlock: 10.50.0.0/16
      Icmp:
        Type: -1
        Code: -1

  GoodNaclOut80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref GoodNacl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 80, To: 80 }

  GoodNaclOutEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref GoodNacl
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 1024, To: 65535 }

  GoodNaclOutIcmpVpc:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref GoodNacl
      RuleNumber: 120
      Protocol: 1
      RuleAction: allow
      Egress: true
      CidrBlock: 10.50.0.0/16
      Icmp:
        Type: -1
        Code: -1

  AssocGoodNacl:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetGood
      NetworkAclId: !Ref GoodNacl

  BlockedNacl:
    Type: AWS::EC2::NetworkAcl
    Properties: { VpcId: !Ref Vpc, Tags: [{ Key: Name, Value: lab3-nacl-blocked }] }

  BlockedNaclIn80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref BlockedNacl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 80, To: 80 }

  BlockedNaclDenyOutEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref BlockedNacl
      RuleNumber: 110
      Protocol: 6
      RuleAction: deny
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 1024, To: 65535 }

  BlockedNaclAllowOut80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref BlockedNacl
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 80, To: 80 }

  AssocBlockedNacl:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetBlocked
      NetworkAclId: !Ref BlockedNacl

  # ----------------- EC2 Instances -----------------
  Ec2Good:
    Type: AWS::EC2::Instance
